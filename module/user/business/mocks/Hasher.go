// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

// Compare provides a mock function with given fields: hashedValue, plainText
func (_m *Hasher) Compare(hashedValue string, plainText string) bool {
	ret := _m.Called(hashedValue, plainText)

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedValue, plainText)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Hash provides a mock function with given fields: plainPassword
func (_m *Hasher) Hash(plainPassword string) string {
	ret := _m.Called(plainPassword)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plainPassword)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
