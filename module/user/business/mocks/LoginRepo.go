// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/hoangminhphuc/goph-chat/module/user/model"
	mock "github.com/stretchr/testify/mock"
)

// LoginRepo is an autogenerated mock type for the LoginRepo type
type LoginRepo struct {
	mock.Mock
}

// FindUser provides a mock function with given fields: ctx, conditions
func (_m *LoginRepo) FindUser(ctx context.Context, conditions map[string]interface{}) (*model.User, error) {
	ret := _m.Called(ctx, conditions)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) (*model.User, error)); ok {
		return rf(ctx, conditions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) *model.User); ok {
		r0 = rf(ctx, conditions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoginRepo creates a new instance of LoginRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginRepo {
	mock := &LoginRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
